using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace tabtool
{
    class CodeGen
    {
        public static void MakeCsharpFileTbs(List<TableMeta> metalist, string codepath)
        {
            string hfile = codepath + "TableStruct.cs";
            using (FileStream fs = new FileStream(hfile, FileMode.Create, FileAccess.Write))
            {
                using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
                {
                    sw.WriteLine("//THIS FILE IS GENERATED BY tabtool, DO NOT EDIT IT!");
                    sw.WriteLine("//GENERATE TIME [{0}]", System.DateTime.Now.ToString());
                    sw.WriteLine();
                    sw.WriteLine("namespace tabtool");
                    sw.WriteLine("{");
                    foreach (var meta in metalist)
                    {
                        sw.WriteLine("  public class {0} : ITableObject", meta.TableName);
                        sw.WriteLine("  {");
                        foreach (var field in meta.Fields)
                        {
                            sw.WriteLine("      public {0} {1};", field.GetCsharpTypeName(), field.fieldName);
                        }
                        sw.WriteLine("      public bool FromString(string s)");
                        sw.WriteLine("      {");
                        sw.WriteLine("          DataReader dr = new DataReader();");
                        sw.WriteLine();
                        sw.WriteLine("          var vs = s.Split(',');");
                        sw.WriteLine("          if (vs.Length != 2)");
                        sw.WriteLine("          {");
                        sw.WriteLine("              return false;");
                        sw.WriteLine("          }");
                        sw.WriteLine();
                        for (int i = 0; i < meta.Fields.Count(); i++)
                        {
                            var field = meta.Fields[i];
                            switch (field.fieldType)
                            {
                                case ETableFieldType.Int:
                                    sw.WriteLine("		{0} = dr.GetInt(vs[{1}]);", field.fieldName, i);
                                    break;
                                case ETableFieldType.Float:
                                    sw.WriteLine("		{0} = dr.GetFloat(vs[{1}]);", field.fieldName, i);
                                    break;
                                case ETableFieldType.String:
                                    sw.WriteLine("		{0} = vs[{1}];", field.fieldName, i);
                                    break;
                                default:
                                    Console.WriteLine("{0}.{1}字段类型错误，只能是int float string！", meta.TableName, field.fieldName);
                                    break;
                            }
                        }

                        sw.WriteLine("          return true;");
                        sw.WriteLine("      }");
                        sw.WriteLine("  };");
                        sw.WriteLine();
                    }
                    sw.WriteLine("}");

                    ////////////////////////
                }
            }

        }

        public static void MakeCsharpFile(List<TableMeta> metalist, string codepath)
        {
            string csfile = codepath + "TableCfg.cs";
            using (FileStream fs = new FileStream(csfile, FileMode.Create, FileAccess.Write))
            {
                using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
                {
                    sw.WriteLine("//THIS FILE IS GENERATED BY tabtool, DO NOT EDIT IT!");
                    sw.WriteLine("//GENERATE TIME [{0}]", System.DateTime.Now.ToString());
                    sw.WriteLine();
                    sw.WriteLine("using System.Collections;");
                    sw.WriteLine("using System.Collections.Generic;");
                    sw.WriteLine("using System.Data;");
                    sw.WriteLine();
                    sw.WriteLine("namespace tabtool");
                    sw.WriteLine("{");
                    foreach (var meta in metalist)
                    {
                        sw.WriteLine();
                        sw.WriteLine("    public class {0}", meta.GetItemName());
                        sw.WriteLine("    {");
                        foreach (var field in meta.Fields)
                        {
                            sw.WriteLine("        public {0} {1};", field.GetCsharpTypeName(), field.fieldName);
                        }
                        sw.WriteLine("    }");
                        sw.WriteLine();
                        sw.WriteLine("    public class {0} : TableManager<{1}, {0}>", meta.GetClassName(),meta.GetItemName());
                        sw.WriteLine("    {");
                        sw.WriteLine("        public override bool Load()");
                        sw.WriteLine("        {");
                        sw.WriteLine("            TableReader tr = new TableReader();");
                        sw.WriteLine("            DataReader dr = new DataReader();");
                        sw.WriteLine("            DataTable dt = tr.ReadFile(MyConfig.WorkDir+\"{0}.txt\");",meta.TableName);
                        sw.WriteLine();
                        sw.WriteLine("            foreach(DataRow row in dt.Rows)");
                        sw.WriteLine("            {");
                        sw.WriteLine("                var data = new {0}();", meta.GetItemName());

                        foreach (var field in meta.Fields)
                        {
                            switch (field.fieldType)
                            {
                                case ETableFieldType.Int:
                                    sw.WriteLine("                  data.{0} = dr.GetInt(row[\"{0}\"].ToString());", field.fieldName);
                                    break;
                                case ETableFieldType.Float:
                                    sw.WriteLine("                  data.{0} = dr.GetFloat(row[\"{0}\"].ToString());", field.fieldName);
                                    break;
                                case ETableFieldType.String:
                                    sw.WriteLine("                  data.{0} = (row[\"{0}\"].ToString());", field.fieldName);
                                    break;
                                case ETableFieldType.IntList:
                                    sw.WriteLine("                  data.{0} = dr.GetIntList(row[\"{0}\"].ToString());", field.fieldName);
                                    break;
                                case ETableFieldType.FloatList:
                                    sw.WriteLine("                  data.{0} = dr.GetFloatList(row[\"{0}\"].ToString());", field.fieldName);
                                    break;
                                case ETableFieldType.StringList:
                                    sw.WriteLine("                  data.{0} = dr.GetStringList(row[\"{0}\"].ToString());", field.fieldName);
                                    break;
                                case ETableFieldType.Struct:
                                    sw.WriteLine("                  data.{0} = dr.GetObject<{1}>(row[\"{0}\"].ToString());", field.fieldName, field.GetCsharpTypeName());
                                    break;
                                case ETableFieldType.StructList:
                                    sw.WriteLine("                  data.{0} = dr.GetObjectList<{1}>(row[\"{0}\"].ToString());", field.fieldName, field.GetTypeNameOfStructList());
                                    break;
                            }
                        }
                        sw.WriteLine("                  m_Datas[data.id] = data;");//必须有一个id
                        sw.WriteLine("            }");
                        sw.WriteLine("            return true;");
                        sw.WriteLine("        }");
                        sw.WriteLine("    }");
                        sw.WriteLine();
                    }

                    sw.WriteLine("    public class TableConfig : SingletonTable<TableConfig>");
                    sw.WriteLine("    {");
                    sw.WriteLine("        public bool LoadTableConfig()");
                    sw.WriteLine("        {");

                    foreach (var meta in metalist)
                    {
                        sw.WriteLine("            if (!{0}.Instance.Load()) return false;", meta.GetClassName());
                    }
                    sw.WriteLine("            return true;");
                    sw.WriteLine("        }");
                    sw.WriteLine("    }");

                    sw.WriteLine("}");
                }
            }

        }
    }
}
