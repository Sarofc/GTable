using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace tabtool
{
    class CodeGen
    {
        // TODO 自定义数据类型
        //public static void MakeCsharpFileTbs(List<TableMeta> metalist, string codepath)
        //{
        //    string hfile = codepath + "TableStruct.cs";
        //    using (FileStream fs = new FileStream(hfile, FileMode.Create, FileAccess.Write))
        //    {
        //        using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
        //        {
        //            sw.WriteLine("//THIS FILE IS GENERATED BY tabtool, DO NOT EDIT IT!");
        //            sw.WriteLine("//GENERATE TIME [{0}]", System.DateTime.Now.ToString());
        //            sw.WriteLine();
        //            sw.WriteLine("namespace tabtool");
        //            sw.WriteLine("{");
        //            foreach (var meta in metalist)
        //            {
        //                sw.WriteLine("\tpublic class {0} : ITableObject", meta.TableName);
        //                sw.WriteLine("\t{");
        //                foreach (var field in meta.Fields)
        //                {
        //                    sw.WriteLine("\t\t/// <summary>\n\t\t/// {0} \n\t\t/// </summary>", field.commits);
        //                    sw.WriteLine("\t\tpublic {0} {1};", field.GetCsharpTypeName(), field.fieldName);
        //                }
        //                sw.WriteLine("\t\tpublic bool FromString(string s)");
        //                sw.WriteLine("\t\t{");
        //                sw.WriteLine("\t\t\tDataReader dr = new DataReader();");
        //                sw.WriteLine();
        //                sw.WriteLine("\t\t\tvar vs = s.Split(',');");
        //                sw.WriteLine("\t\t\tif (vs.Length != 2)");
        //                sw.WriteLine("\t\t\t{");
        //                sw.WriteLine("\t\t\t\treturn false;");
        //                sw.WriteLine("\t\t\t}");
        //                sw.WriteLine();
        //                for (int i = 0; i < meta.Fields.Count(); i++)
        //                {
        //                    var field = meta.Fields[i];
        //                    switch (field.fieldType)
        //                    {
        //                        case ETableFieldType.Int:
        //                            sw.WriteLine("\t\t\t{0} = dr.GetInt(vs[{1}]);", field.fieldName, i);
        //                            break;
        //                        case ETableFieldType.Float:
        //                            sw.WriteLine("\t\t\t{0} = dr.GetFloat(vs[{1}]);", field.fieldName, i);
        //                            break;
        //                        case ETableFieldType.String:
        //                            sw.WriteLine("\t\t\t{0} = vs[{1}];", field.fieldName, i);
        //                            break;
        //                        default:
        //                            Console.WriteLine("{0}.{1}字段类型错误，只能是int float string！", meta.TableName, field.fieldName);
        //                            break;
        //                    }
        //                }

        //                sw.WriteLine("\t\t\treturn true;");
        //                sw.WriteLine("\t\t}");
        //                sw.WriteLine("\t};");
        //                sw.WriteLine();
        //            }
        //            sw.WriteLine("}");

        //            ////////////////////////
        //        }
        //    }
        //}

        //public static void MakeCsharpFile(List<TableMeta> metalist, string codepath)
        //{
        //    string csfile = codepath + "TableCfg.cs";
        //    using (FileStream fs = new FileStream(csfile, FileMode.Create, FileAccess.Write))
        //    {
        //        using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
        //        {
        //            sw.WriteLine("//HIS FILE IS GENERATED BY tabtool, DO NOT EDIT IT!");
        //            sw.WriteLine("//GENERATE TIME [{0}]", System.DateTime.Now.ToString());
        //            sw.WriteLine();
        //            sw.WriteLine("using System.Collections;");
        //            sw.WriteLine("using System.Collections.Generic;");
        //            sw.WriteLine("using System.Data;");
        //            sw.WriteLine();
        //            sw.WriteLine("namespace tabtool");
        //            sw.WriteLine("{");
        //            foreach (var meta in metalist)
        //            {
        //                sw.WriteLine();
        //                sw.WriteLine("\tpublic class {0}", meta.GetItemName());
        //                sw.WriteLine("\t{");
        //                foreach (var field in meta.Fields)
        //                {
        //                    sw.WriteLine("\t\t/// <summary>\n\t\t/// {0} \n\t\t/// </summary>", field.commits);
        //                    sw.WriteLine("\t\tpublic {0} {1};", field.GetCsharpTypeName(), field.fieldName);
        //                }
        //                sw.WriteLine("\t}");
        //                sw.WriteLine();
        //                sw.WriteLine("\tpublic class {0} : TableManager<{1}, {0}>", meta.GetClassName(), meta.GetItemName());
        //                sw.WriteLine("\t{");
        //                sw.WriteLine("\t\tpublic override bool Load()");
        //                sw.WriteLine("\t\t{");
        //                //sw.WriteLine("\t\t\tTableReader tr = new TableReader();");
        //                //sw.WriteLine("\t\t\tDataReader dr = new DataReader();");
        //                sw.WriteLine("\t\t\tDataTable dt = tr.ReadFile(MyConfig.WorkDir+\"{0}.txt\");", meta.TableName);
        //                sw.WriteLine();
        //                sw.WriteLine("\t\t\tforeach(DataRow row in dt.Rows)");
        //                sw.WriteLine("\t\t\t{");
        //                sw.WriteLine("\t\t\t\tvar data = new {0}();", meta.GetItemName());

        //                foreach (var field in meta.Fields)
        //                {
        //                    switch (field.fieldType)
        //                    {
        //                        case ETableFieldType.Int:
        //                            sw.WriteLine("\t\t\t\tdata.{0} = dr.GetInt(row[\"{0}\"].ToString());", field.fieldName);
        //                            break;
        //                        case ETableFieldType.Float:
        //                            sw.WriteLine("\t\t\t\tdata.{0} = dr.GetFloat(row[\"{0}\"].ToString());", field.fieldName);
        //                            break;
        //                        case ETableFieldType.String:
        //                            sw.WriteLine("\t\t\t\tdata.{0} = (row[\"{0}\"].ToString());", field.fieldName);
        //                            break;
        //                        case ETableFieldType.IntList:
        //                            sw.WriteLine("\t\t\t\tdata.{0} = dr.GetIntList(row[\"{0}\"].ToString());", field.fieldName);
        //                            break;
        //                        case ETableFieldType.FloatList:
        //                            sw.WriteLine("\t\t\t\tdata.{0} = dr.GetFloatList(row[\"{0}\"].ToString());", field.fieldName);
        //                            break;
        //                        //case ETableFieldType.StringList:
        //                        //    sw.WriteLine("\t\t\t\tdata.{0} = dr.GetStringList(row[\"{0}\"].ToString());", field.fieldName);
        //                        //    break;
        //                        case ETableFieldType.Struct:
        //                            sw.WriteLine("\t\t\t\tdata.{0} = dr.GetObject<{1}>(row[\"{0}\"].ToString());", field.fieldName, field.GetCsharpTypeName());
        //                            break;
        //                        case ETableFieldType.StructList:
        //                            sw.WriteLine("\t\t\t\tdata.{0} = dr.GetObjectList<{1}>(row[\"{0}\"].ToString());", field.fieldName, field.GetTypeNameOfStructList());
        //                            break;
        //                    }
        //                }
        //                sw.WriteLine("\t\t\t\tm_Datas[data.id] = data;");//必须有一个id
        //                sw.WriteLine("\t\t\t}");
        //                sw.WriteLine("\t\t\treturn true;");
        //                sw.WriteLine("\t\t}");
        //                sw.WriteLine("\t}");
        //                sw.WriteLine();
        //            }

        //            sw.WriteLine("\tpublic class TableConfig : SingletonTable<TableConfig>");
        //            sw.WriteLine("\t{");
        //            sw.WriteLine("\t\tpublic bool LoadTableConfig()");
        //            sw.WriteLine("\t\t{");

        //            foreach (var meta in metalist)
        //            {
        //                sw.WriteLine("\t\t\tif (!{0}.Instance.Load()) return false;", meta.GetClassName());
        //            }
        //            sw.WriteLine("\t\t\treturn true;");
        //            sw.WriteLine("\t\t}");
        //            sw.WriteLine("\t}");

        //            sw.WriteLine("}");
        //        }
        //    }

        //}


        public static void MakeCsharpFile(List<ExcelData> excelDatas, string codepath)
        {
            string csfile = codepath + "TableCfg.cs";
            using (FileStream fs = new FileStream(csfile, FileMode.Create, FileAccess.Write))
            {
                using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
                {
                    sw.WriteLine("//HIS FILE IS GENERATED BY tabtool, DO NOT EDIT IT!");
                    sw.WriteLine("//GENERATE TIME [{0}]", System.DateTime.Now.ToString());
                    sw.WriteLine();
                    sw.WriteLine("using System.Collections;");
                    sw.WriteLine("using System.Collections.Generic;");
                    sw.WriteLine("using System.Data;");
                    sw.WriteLine();
                    sw.WriteLine("namespace tabtool");
                    sw.WriteLine("{");
                    for (int i = 0; i < excelDatas.Count; i++)
                    {
                        var meta = excelDatas[i];
                        sw.WriteLine();
                        sw.WriteLine("\tpublic class {0}", meta.GetItemName());
                        sw.WriteLine("\t{");

                        foreach (var colData in meta.header)
                        {
                            sw.WriteLine("\t\t/// <summary>\n\t\t/// {0} \n\t\t/// </summary>", colData.fieldComment);
                            sw.WriteLine("\t\tpublic {0} {1};", colData.fieldTypeName, colData.fieldName);
                        }

                        sw.WriteLine("\t}");
                        sw.WriteLine();
                        sw.WriteLine("\tpublic class {0} : TableManager<{1}, {0}>", meta.GetClassName(), meta.GetItemName());
                        sw.WriteLine("\t{");
                        sw.WriteLine("\t\tpublic override bool Load()");
                        sw.WriteLine("\t\t{");
                        //sw.WriteLine("\t\t\tTableReader tr = new TableReader();");
                        //sw.WriteLine("\t\t\tDataReader dr = new DataReader();");
                        sw.WriteLine("\t\t\tDataTable dt = tr.ReadFile(MyConfig.WorkDir+\"{0}.txt\");", meta.tablName);
                        sw.WriteLine();
                        sw.WriteLine("\t\t\tforeach(DataRow row in dt.Rows)");
                        sw.WriteLine("\t\t\t{");
                        sw.WriteLine("\t\t\t\tvar data = new {0}();", meta.GetItemName());

                        foreach (var colData in meta.header)
                        {
                            switch (colData.fieldType)
                            {
                                case ETableFieldType.Int:
                                    sw.WriteLine("\t\t\t\tdata.{0} = dr.GetInt(row[\"{0}\"].ToString());", colData.fieldName);
                                    break;
                                case ETableFieldType.Float:
                                    sw.WriteLine("\t\t\t\tdata.{0} = dr.GetFloat(row[\"{0}\"].ToString());", colData.fieldName);
                                    break;
                                case ETableFieldType.String:
                                    sw.WriteLine("\t\t\t\tdata.{0} = (row[\"{0}\"].ToString());", colData.fieldName);
                                    break;
                                case ETableFieldType.IntList:
                                    sw.WriteLine("\t\t\t\tdata.{0} = dr.GetIntList(row[\"{0}\"].ToString());", colData.fieldName);
                                    break;
                                case ETableFieldType.FloatList:
                                    sw.WriteLine("\t\t\t\tdata.{0} = dr.GetFloatList(row[\"{0}\"].ToString());", colData.fieldName);
                                    break;
                                    //case ETableFieldType.StringList:
                                    //    sw.WriteLine("\t\t\t\tdata.{0} = dr.GetStringList(row[\"{0}\"].ToString());", field.fieldName);
                                    //    break;
                                    //case ETableFieldType.Struct:
                                    //    sw.WriteLine("\t\t\t\tdata.{0} = dr.GetObject<{1}>(row[\"{0}\"].ToString());", field.fieldName, field.GetCsharpTypeName());
                                    //    break;
                                    //case ETableFieldType.StructList:
                                    //    sw.WriteLine("\t\t\t\tdata.{0} = dr.GetObjectList<{1}>(row[\"{0}\"].ToString());", field.fieldName, field.GetTypeNameOfStructList());
                                    //    break;
                            }
                        }
                        sw.WriteLine("\t\t\t\tm_Datas[data.id] = data;");//必须有一个id
                        sw.WriteLine("\t\t\t}");
                        sw.WriteLine("\t\t\treturn true;");
                        sw.WriteLine("\t\t}");
                        sw.WriteLine("\t}");
                        sw.WriteLine();
                    }

                    sw.WriteLine("\tpublic class TableConfig : SingletonTable<TableConfig>");
                    sw.WriteLine("\t{");
                    sw.WriteLine("\t\tpublic bool LoadTableConfig()");
                    sw.WriteLine("\t\t{");

                    foreach (var meta in excelDatas)
                    {
                        sw.WriteLine("\t\t\tif (!{0}.Instance.Load()) return false;", meta.GetClassName());
                    }

                    sw.WriteLine("\t\t\treturn true;");
                    sw.WriteLine("\t\t}");
                    sw.WriteLine("\t}");

                    sw.WriteLine("}");
                }
            }

        }
    }
}
