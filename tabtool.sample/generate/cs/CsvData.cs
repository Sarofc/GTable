//------------------------------------------------------------------------------
// File   : CsvData.cs
// Author : Saro
// Time   : 2021/3/14 22:15:13
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Saro.Table
{
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    
    
    public sealed class tTest
    {
        
        /// <summary>
        /// int
        /// </summary>
        public int _int;
        
        /// <summary>
        /// byte
        /// </summary>
        public byte _byte;
        
        /// <summary>
        /// long
        /// </summary>
        public long _long;
        
        /// <summary>
        /// float
        /// </summary>
        public float _float;
        
        /// <summary>
        /// string
        /// </summary>
        public string _string;
        
        /// <summary>
        /// byte+
        /// </summary>
        public System.Collections.Generic.List<byte> byte_arr;
        
        /// <summary>
        /// int+
        /// </summary>
        public System.Collections.Generic.List<int> int_arr;
        
        /// <summary>
        /// long+
        /// </summary>
        public System.Collections.Generic.List<long> long_arr;
        
        /// <summary>
        /// float+
        /// </summary>
        public System.Collections.Generic.List<float> float_arr;
        
        /// <summary>
        /// [int|int]
        /// </summary>
        public System.Collections.Generic.Dictionary<int, int> map_int_int;
    }
    
    public sealed class csvTest : BaseTable<tTest, csvTest>
    {
        
		public static tTest Query(int _int)
		{
			var key = KeyHelper.GetKey(_int);
			if (!Get().Load()) throw new System.Exception("load table failed.type: " + nameof(tTest));
			if (Get().m_Datas.TryGetValue(key, out tTest t))
			{
				return t;
			}
			throw new System.Exception("null table. type: " + nameof(tTest));
		}

        
        public override bool Load()
        {
			if (m_Loaded) return true;
			var bytes = GetBytes("Test.txt");

			using (var ms = new MemoryStream(bytes))
			{
				using (var br = new BinaryReader(ms))
				{
					var version = br.ReadInt32();//version
					if (version != TableCfg.k_DataVersion)
						throw new System.Exception($"error version. file:{version}  exe:{TableCfg.k_DataVersion}");

					var dataLen = br.ReadInt32();
					for (int i = 0; i < dataLen; i++)
					{
						var data = new tTest();
						data._int = br.ReadInt32();
						data._byte = br.ReadByte();
						data._long = br.ReadInt64();
						data._float = br.ReadSingle();
						data._string = br.ReadString();
						var len = br.ReadUInt16();
						data.byte_arr = new List<byte>(len);
						for (int j = 0; j < len; j++)
						{
							data.byte_arr.Add(br.ReadByte());
						}
						len = br.ReadUInt16();
						data.int_arr = new List<int>(len);
						for (int j = 0; j < len; j++)
						{
							data.int_arr.Add(br.ReadInt32());
						}
						len = br.ReadUInt16();
						data.long_arr = new List<long>(len);
						for (int j = 0; j < len; j++)
						{
							data.long_arr.Add(br.ReadInt64());
						}
						len = br.ReadUInt16();
						data.float_arr = new List<float>(len);
						for (int j = 0; j < len; j++)
						{
							data.float_arr.Add(br.ReadSingle());
						}
						len = br.ReadUInt16();
						data.map_int_int = new Dictionary<int, int>(len);
						for (int j = 0; j < len; j++)
						{
							var key = br.ReadInt32();
							var val = br.ReadInt32();
							data.map_int_int.Add(key, val);
						}
						var _key = br.ReadUInt64();
						m_Datas[_key] = data;
					}
				}
			}
			m_Loaded = true;

            return true;
        }
        
        public string PrintTable()
        {
			var sb = new StringBuilder(1024);
			foreach (var data in m_Datas.Values)
			{
				sb.Append(data._int).Append("\t");
				sb.Append(data._byte).Append("\t");
				sb.Append(data._long).Append("\t");
				sb.Append(data._float).Append("\t");
				sb.Append(data._string).Append("\t");
				sb.Append(string.Join(",", data.byte_arr)).Append("\t");
				sb.Append(string.Join(",", data.int_arr)).Append("\t");
				sb.Append(string.Join(",", data.long_arr)).Append("\t");
				sb.Append(string.Join(",", data.float_arr)).Append("\t");
				sb.Append(string.Join(",", data.map_int_int)).Append("\t");
				sb.AppendLine();
			}

            return sb.ToString();
        }
    }
    
    public enum eTest
    {
        
        key1 = 0,
        
        key2 = 2,
        
        key3 = 3,
        
        key4 = 4,
        
        key5 = 5,
        
        key6 = 6,
        
        key7 = 7,
        
        key8 = 8,
        
        key9 = 9,
        
        key10 = 10,
        
        key11 = 11,
        
        key12 = 12,
        
        key13 = 13,
        
        key14 = 14,
        
        key15 = 15,
        
        key16 = 16,
        
        key17 = 17,
        
        key18 = 18,
        
        key19 = 19,
    }
    
    public sealed class tTest1
    {
        
        /// <summary>
        /// key1
        /// </summary>
        public int key1;
        
        /// <summary>
        /// key2
        /// </summary>
        public int key2;
        
        /// <summary>
        /// byte
        /// </summary>
        public byte _byte;
        
        /// <summary>
        /// long
        /// </summary>
        public long _long;
        
        /// <summary>
        /// float
        /// </summary>
        public float _float;
        
        /// <summary>
        /// string
        /// </summary>
        public string _string;
        
        /// <summary>
        /// byte+
        /// </summary>
        public System.Collections.Generic.List<byte> byte_arr;
        
        /// <summary>
        /// int+
        /// </summary>
        public System.Collections.Generic.List<int> int_arr;
        
        /// <summary>
        /// long+
        /// </summary>
        public System.Collections.Generic.List<long> long_arr;
        
        /// <summary>
        /// float+
        /// </summary>
        public System.Collections.Generic.List<float> float_arr;
        
        /// <summary>
        /// [int|int]
        /// </summary>
        public System.Collections.Generic.Dictionary<int, int> map_int_int;
    }
    
    public sealed class csvTest1 : BaseTable<tTest1, csvTest1>
    {
        
		public static tTest1 Query(int key1, int key2)
		{
			var key = KeyHelper.GetKey(key1, key2);
			if (!Get().Load()) throw new System.Exception("load table failed.type: " + nameof(tTest1));
			if (Get().m_Datas.TryGetValue(key, out tTest1 t))
			{
				return t;
			}
			throw new System.Exception("null table. type: " + nameof(tTest1));
		}

        
        public override bool Load()
        {
			if (m_Loaded) return true;
			var bytes = GetBytes("Test1.txt");

			using (var ms = new MemoryStream(bytes))
			{
				using (var br = new BinaryReader(ms))
				{
					var version = br.ReadInt32();//version
					if (version != TableCfg.k_DataVersion)
						throw new System.Exception($"error version. file:{version}  exe:{TableCfg.k_DataVersion}");

					var dataLen = br.ReadInt32();
					for (int i = 0; i < dataLen; i++)
					{
						var data = new tTest1();
						data.key1 = br.ReadInt32();
						data.key2 = br.ReadInt32();
						data._byte = br.ReadByte();
						data._long = br.ReadInt64();
						data._float = br.ReadSingle();
						data._string = br.ReadString();
						var len = br.ReadUInt16();
						data.byte_arr = new List<byte>(len);
						for (int j = 0; j < len; j++)
						{
							data.byte_arr.Add(br.ReadByte());
						}
						len = br.ReadUInt16();
						data.int_arr = new List<int>(len);
						for (int j = 0; j < len; j++)
						{
							data.int_arr.Add(br.ReadInt32());
						}
						len = br.ReadUInt16();
						data.long_arr = new List<long>(len);
						for (int j = 0; j < len; j++)
						{
							data.long_arr.Add(br.ReadInt64());
						}
						len = br.ReadUInt16();
						data.float_arr = new List<float>(len);
						for (int j = 0; j < len; j++)
						{
							data.float_arr.Add(br.ReadSingle());
						}
						len = br.ReadUInt16();
						data.map_int_int = new Dictionary<int, int>(len);
						for (int j = 0; j < len; j++)
						{
							var key = br.ReadInt32();
							var val = br.ReadInt32();
							data.map_int_int.Add(key, val);
						}
						var _key = br.ReadUInt64();
						m_Datas[_key] = data;
					}
				}
			}
			m_Loaded = true;

            return true;
        }
        
        public string PrintTable()
        {
			var sb = new StringBuilder(1024);
			foreach (var data in m_Datas.Values)
			{
				sb.Append(data.key1).Append("\t");
				sb.Append(data.key2).Append("\t");
				sb.Append(data._byte).Append("\t");
				sb.Append(data._long).Append("\t");
				sb.Append(data._float).Append("\t");
				sb.Append(data._string).Append("\t");
				sb.Append(string.Join(",", data.byte_arr)).Append("\t");
				sb.Append(string.Join(",", data.int_arr)).Append("\t");
				sb.Append(string.Join(",", data.long_arr)).Append("\t");
				sb.Append(string.Join(",", data.float_arr)).Append("\t");
				sb.Append(string.Join(",", data.map_int_int)).Append("\t");
				sb.AppendLine();
			}

            return sb.ToString();
        }
    }
    
    public enum eTest1
    {
        
        key1 = 0,
        
        key2 = 2,
        
        key3 = 3,
        
        key4 = 4,
        
        key5 = 5,
        
        key6 = 6,
        
        key7 = 7,
        
        key8 = 8,
        
        key9 = 9,
        
        key10 = 10,
        
        key11 = 11,
        
        key12 = 12,
        
        key13 = 13,
        
        key14 = 14,
        
        key15 = 15,
        
        key16 = 16,
        
        key17 = 17,
        
        key18 = 18,
        
        key19 = 19,
    }
    
    public sealed class tTest2
    {
        
        /// <summary>
        /// key1
        /// </summary>
        public int key1;
        
        /// <summary>
        /// key2
        /// </summary>
        public int key2;
        
        /// <summary>
        /// key3
        /// </summary>
        public int key3;
        
        /// <summary>
        /// byte
        /// </summary>
        public byte _byte;
        
        /// <summary>
        /// long
        /// </summary>
        public long _long;
        
        /// <summary>
        /// float
        /// </summary>
        public float _float;
        
        /// <summary>
        /// string
        /// </summary>
        public string _string;
        
        /// <summary>
        /// byte+
        /// </summary>
        public System.Collections.Generic.List<byte> byte_arr;
        
        /// <summary>
        /// int+
        /// </summary>
        public System.Collections.Generic.List<int> int_arr;
        
        /// <summary>
        /// long+
        /// </summary>
        public System.Collections.Generic.List<long> long_arr;
        
        /// <summary>
        /// float+
        /// </summary>
        public System.Collections.Generic.List<float> float_arr;
        
        /// <summary>
        /// [int|int]
        /// </summary>
        public System.Collections.Generic.Dictionary<int, int> map_int_int;
    }
    
    public sealed class csvTest2 : BaseTable<tTest2, csvTest2>
    {
        
		public static tTest2 Query(int key1, int key2, int key3)
		{
			var key = KeyHelper.GetKey(key1, key2, key3);
			if (!Get().Load()) throw new System.Exception("load table failed.type: " + nameof(tTest2));
			if (Get().m_Datas.TryGetValue(key, out tTest2 t))
			{
				return t;
			}
			throw new System.Exception("null table. type: " + nameof(tTest2));
		}

        
        public override bool Load()
        {
			if (m_Loaded) return true;
			var bytes = GetBytes("Test2.txt");

			using (var ms = new MemoryStream(bytes))
			{
				using (var br = new BinaryReader(ms))
				{
					var version = br.ReadInt32();//version
					if (version != TableCfg.k_DataVersion)
						throw new System.Exception($"error version. file:{version}  exe:{TableCfg.k_DataVersion}");

					var dataLen = br.ReadInt32();
					for (int i = 0; i < dataLen; i++)
					{
						var data = new tTest2();
						data.key1 = br.ReadInt32();
						data.key2 = br.ReadInt32();
						data.key3 = br.ReadInt32();
						data._byte = br.ReadByte();
						data._long = br.ReadInt64();
						data._float = br.ReadSingle();
						data._string = br.ReadString();
						var len = br.ReadUInt16();
						data.byte_arr = new List<byte>(len);
						for (int j = 0; j < len; j++)
						{
							data.byte_arr.Add(br.ReadByte());
						}
						len = br.ReadUInt16();
						data.int_arr = new List<int>(len);
						for (int j = 0; j < len; j++)
						{
							data.int_arr.Add(br.ReadInt32());
						}
						len = br.ReadUInt16();
						data.long_arr = new List<long>(len);
						for (int j = 0; j < len; j++)
						{
							data.long_arr.Add(br.ReadInt64());
						}
						len = br.ReadUInt16();
						data.float_arr = new List<float>(len);
						for (int j = 0; j < len; j++)
						{
							data.float_arr.Add(br.ReadSingle());
						}
						len = br.ReadUInt16();
						data.map_int_int = new Dictionary<int, int>(len);
						for (int j = 0; j < len; j++)
						{
							var key = br.ReadInt32();
							var val = br.ReadInt32();
							data.map_int_int.Add(key, val);
						}
						var _key = br.ReadUInt64();
						m_Datas[_key] = data;
					}
				}
			}
			m_Loaded = true;

            return true;
        }
        
        public string PrintTable()
        {
			var sb = new StringBuilder(1024);
			foreach (var data in m_Datas.Values)
			{
				sb.Append(data.key1).Append("\t");
				sb.Append(data.key2).Append("\t");
				sb.Append(data.key3).Append("\t");
				sb.Append(data._byte).Append("\t");
				sb.Append(data._long).Append("\t");
				sb.Append(data._float).Append("\t");
				sb.Append(data._string).Append("\t");
				sb.Append(string.Join(",", data.byte_arr)).Append("\t");
				sb.Append(string.Join(",", data.int_arr)).Append("\t");
				sb.Append(string.Join(",", data.long_arr)).Append("\t");
				sb.Append(string.Join(",", data.float_arr)).Append("\t");
				sb.Append(string.Join(",", data.map_int_int)).Append("\t");
				sb.AppendLine();
			}

            return sb.ToString();
        }
    }
    
    public enum eTest2
    {
        
        key1 = 0,
        
        key2 = 2,
        
        key3 = 3,
        
        key4 = 4,
        
        key5 = 5,
        
        key6 = 6,
        
        key7 = 7,
        
        key8 = 8,
        
        key9 = 9,
        
        key10 = 10,
        
        key11 = 11,
        
        key12 = 12,
        
        key13 = 13,
        
        key14 = 14,
        
        key15 = 15,
        
        key16 = 16,
        
        key17 = 17,
        
        key18 = 18,
        
        key19 = 19,
    }
}
